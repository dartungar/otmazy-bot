# функции для быстрой склейки шаблона
# возможно шаблон - это dict с правилами или просто list типа [word_type, word_type, word_type]
# а может быть и функция высокого уровня, вызывающая подбор речи с заданными мной параметрами
# потом параметры можно хранить в настройках

# подлежащее - я...а может и кто-то другой, но это уже сложнее

# TODO: сделать декораторы для передачи morph'а и массива слов из Pandas


def get_podlezh():
    # ;)
    # я и "мне", "жене" - совсем разные кейсы. дательный падеж подлежащего надо учитывать
    return 'я'


# всякие "нужно", "придется" и т.д.
# TODO
def get_must(word):
    p = morph.parse(word)[0]
    if 'datv' in p.tag:
        return random.choice('нужно', 'придется', 'давно пора')
    pass


# сказуемое. в отмазках глаголы бывают нескольких основных типов 
def get_skaz(podlezh, to_be=0):
    # глаголы есть совершенные и несовершенные! помни это! 
    # сказуемое зависит от подлежащего: лицо, ???
    # типы глаголов: движение, занятие, созидание\креатив\мышление, решение вопроса (решить, разобраться, закончить итд)
    # нужны более подробные глаголы. "отвезти" и "нужно отвезти" - разные. 
    # TODO: склонять по времени
    # TODO: добавить работу с "буду ..."
    
    # парсим подлежащее
    p = morph.parse(podlezh)[0]

    # TODO: выбираем сказуемое
    skaz = df['verb'].sample().iloc[0, 0]
    # TODO: нормализуем и парсим сказуемое
    s = morph.parse(skaz)[0]

    # склоняем по всяким признакам! v1, тупо перебираем нужные граммемы
    for grm in ['1per', '2per', '3per', 'sing', 'plur']:
        if grm in p.tag:
            s = s.inflect({grm})

    # для "мне", "ей" и т.д. инфинитив ("мне нужно")
    if 'datv' in p.tag:
        s = s.normal_form

    return s.word



# субъект может встречаться несколько раз - как дополнение и как обстоятельство!
# в некоторых случаях нужен предлог. это зависит от слова и контекста
# например дополнению, как правило не нужен предлог, а обстоятельству нужен

# дополнение: кого или что. объект, короче
def get_noun_add(skaz):
    # выбор дополнения зависит от сказуемого
    # TODO: нужен кастомный признак для сказуемого - совместим ли с animate, movable существительным

    noun = df['noun'].sample().iloc[0, 0]
    n = morph.parse(noun)[0]
    n.inflect({'accs'})

    return n.word


# TODO
def get_predlog(main_word):
    pass
    # выбор предлога зависит от главного слова
    # судя по всему, без привязки не обойтись :\ 
    # что делать с разными предлогами "в работе \ на работе" - хз


# TODO
# обстоятельство: куда, зачем и т.д. TOUGH SHIT
def get_noun_circ(skaz, noun_add):
    
    noun = df['noun'].sample().iloc[0, 0]
    n = morph.parse(noun)[0]
    n.inflect({'loc2'}) 

    return n.word



    
